var __read = (this && this.__read) || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r, ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
import {
    shallowRef
} from 'vue';
import {
    State
} from 'xstate';
import {
    useInterpret
} from './useInterpret';
export function useMachine(getMachine) {
    var _a = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        _a[_i - 1] = arguments[_i];
    }
    var _b = __read(_a, 1),
        _c = _b[0],
        options = _c === void 0 ? {} : _c;

    function listener(nextState) {
        // Only change the current state if:
        // - the incoming state is the "live" initial state (since it might have new actors)
        // - OR the incoming state actually changed.
        //
        // The "live" initial state will have .changed === undefined.
        var initialStateChanged = nextState.changed === undefined && Object.keys(nextState.children).length;
        if (nextState.changed || initialStateChanged) {
            state.value = nextState;
        }
    }
    var service = useInterpret(getMachine, options, listener);
    var initialState = service.machine.initialState;
    var state = shallowRef(options.state ? State.create(options.state) : initialState);
    return {
        state: state,
        send: service.send,
        service: service
    };
}