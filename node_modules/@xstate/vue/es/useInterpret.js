var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r, ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
import {
    onBeforeUnmount,
    onMounted
} from 'vue';
import {
    interpret,
    State,
    toObserver
} from 'xstate';
export function useInterpret(getMachine) {
    var _a = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        _a[_i - 1] = arguments[_i];
    }
    var _b = __read(_a, 2),
        _c = _b[0],
        options = _c === void 0 ? {} : _c,
        observerOrListener = _b[1];
    var machine = typeof getMachine === 'function' ? getMachine() : getMachine;
    var context = options.context,
        guards = options.guards,
        actions = options.actions,
        activities = options.activities,
        services = options.services,
        delays = options.delays,
        rehydratedState = options.state,
        interpreterOptions = __rest(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
    var machineConfig = {
        context: context,
        guards: guards,
        actions: actions,
        activities: activities,
        services: services,
        delays: delays
    };
    var machineWithConfig = machine.withConfig(machineConfig, function() {
        return (__assign(__assign({}, machine.context), context));
    });
    var service = interpret(machineWithConfig, interpreterOptions).start(rehydratedState ? State.create(rehydratedState) : undefined);
    var sub;
    onMounted(function() {
        if (observerOrListener) {
            sub = service.subscribe(toObserver(observerOrListener));
        }
    });
    onBeforeUnmount(function() {
        service.stop();
        sub === null || sub === void 0 ? void 0 : sub.unsubscribe();
    });
    return service;
}